{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","console","log","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAgB9C,OACI,0BAAMC,SATY,SAACC,GACnBA,EAAEC,iBACGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,OAMd,gCAAOD,EAAP,KACA,2BACIQ,KAAK,OACLC,MAAQT,EACRU,SAlBe,SAACP,GACxBF,EAAeE,EAAEQ,OAAOF,YCNnBG,EAAc,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAGpC,OADAC,QAAQC,IAAI,CAACJ,KAAIC,QAAOC,QAEpB,yBAAKG,UAAU,yCACX,yBAAKC,IAAMJ,EAAMK,IAAMN,IACvB,2BAAKA,K,uBCNJO,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACJ,mCACTR,EAFa,iDAEoCS,UAAWF,GAF/C,6BACJ,oCADI,SAGAG,MAAOV,GAHP,cAGbW,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KACDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHlB,GAAIkB,EAAIlB,GACRC,MAAOiB,EAAIjB,MACXC,IAAG,UAAEgB,EAAIC,cAAN,aAAE,EAAYC,iBAAiBlB,QATvB,kBAcZc,GAdY,4CAAH,sDCGPK,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,ECFb,SAAEA,GAAe,IAAD,EAEdvB,mBAAS,CAC/B6B,KAAM,GACNO,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAwBxC,OAbAC,qBAAW,WACPjB,EAASC,GACJiB,MAAM,SAAAC,GAEHH,EAAS,CACDT,KAAMY,EACNL,SAAS,SAK1B,CAAEb,IAEEc,EDnB0BK,GAApBT,EAHwB,EAG7BJ,KAAaO,EAHgB,EAGhBA,QAKrB,OACI,oCACI,gCAAOb,EAAP,KAGEa,GAAW,uBAAGjB,UAAU,oCAAb,WAEb,yBAAKA,UAAU,aAGPc,EAAOF,KAAK,SAAAC,GAAG,OACX,kBAAC,EAAD,eACIW,IAAKX,EAAIlB,IAELkB,UEejBY,EArCM,WAAM,MAKa5C,mBAAS,CAAC,cALvB,mBAKhB6C,EALgB,KAKJ9C,EALI,KAYvB,OACI,oCACE,wBAAIoB,UAAU,qCAAd,gBACA,kBAAC,EAAD,CAAapB,cAAeA,IAC5B,6BAEA,4BAKM8C,EAAWd,KAAK,SAACR,GAAD,OACZ,kBAAC,EAAD,CACIoB,IAAKpB,EACLA,SAAUA,U,MCvBlCuB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.e63b2a1b.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handledInputChange = (e) => {\n        setInputValue( e.target.value )\n    }\n\n    const handledSubmit = (e) => {\n        e.preventDefault();\n        if ( inputValue.trim().length > 2 ) {\n            setCategories( cats => [inputValue, ...cats]);\n            setInputValue('');\n        }\n        \n    }\n    return (\n        <form onSubmit={ handledSubmit }>\n            <h1> { inputValue } </h1>\n            <input \n                type=\"text\"\n                value={ inputValue }\n                onChange={ handledInputChange }\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","import React from 'react'\n\nexport const GifGridItem = ({id, title, url}) => {\n\n    console.log({id, title, url})\n    return (\n        <div className=\"card animate__animated animate__pulse\">\n            <img src={ url } alt={ title } />\n            <p>{ title }</p>\n        </div>\n    )\n}\n","\n\nexport const getGifs = async( category ) => {\n    const apiKey = '5uAsgQW1R5MGPMFMO4gOq8jRITy7xKIU'\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=${apiKey}`;\n    const resp = await fetch( url );\n    const {data} = await resp.json();\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    });\n\n    // console.log(gifs)\n    return gifs\n    \n}","import React, {useState, useEffect} from 'react'\nimport { GifGridItem } from './GifGridItem';\nimport { getGifs } from '../helpers/getGifs';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nexport const GifGrid = ({ category }) => {\n\n    // const [images, setImages] = useState([]);\n    const { data:images, loading } = useFetchGifs();\n    // console.log(state)\n    \n\n    \n    return (\n        <>\n            <h3> { category } </h3>\n\n            {/* { loading ? 'Cargando...' : 'Data cargada'} */}\n            { loading && <q className=\"animate__animated animate__flash\">Loading</q>}\n\n            <div className=\"card-grid\">\n                \n                {\n                    images.map( img => (\n                        <GifGridItem \n                            key={img.id}\n                            // img={img}\n                            {...img}\n                        />\n                    ))\n                }\n            </div>\n        </>\n    )\n}\n","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs'\n\nexport const useFetchGifs = ( category ) => {\n    \n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    // para evitar que el componente completo se renderize\n    // cada vez que hace un cambio\n    // ES decir, para que no vuelva a consultar el endpoint\n    // No pueden ser async\n    useEffect( () => {\n        getGifs( category )\n            .then( imgs => {\n\n                setState({\n                        data: imgs,\n                        loading: false\n                  \n                });\n\n            } );\n    }, [ category ])  // Areglo de dependencia es necesario para lograrlo\n\n    return state;\n}","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory'\nimport { GifGrid } from './components/GifGrid'\n// import PropTypes from 'prop-types'\n\nconst GifExpertApp = () => {\n\n    // No puedo agregar valores en un array\n    // const categories = ['One Punch', 'Samurai X', 'Pokemon'];\n\n    const [categories, setCategories] = useState(['One Punch'])\n\n    // const handledAdd = () => {\n    //     // setCategories( [...categories, 'X Men'] );\n    //     setCategories( c => [...c, 'X Men'])\n    // }\n\n    return (\n        <>\n          <h2 className=\"animate__animated animate__bounce\">GifExpertApp</h2>  \n          <AddCategory setCategories={setCategories}/>\n          <hr />\n\n          <ol>\n              { \n                // categories.map( (category, i) => {\n                // return <li key={ i }>category</li>\n                // } )  // No hace falta el index\n                categories.map( (category) => (\n                    <GifGrid\n                        key={category}\n                        category={category}\n                    />\n                ))\n              }\n          </ol>\n        </>\n    )\n}\n\n\n\nexport default GifExpertApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}